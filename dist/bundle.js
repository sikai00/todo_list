(()=>{"use strict";var n={735:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',"",{version:3,sources:["webpack://./node_modules/normalize.css/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,iBAAiB,EAAE,MAAM;EACzB,8BAA8B,EAAE,MAAM;AACxC;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,SAAS,EAAE,MAAM;EACjB,iBAAiB,EAAE,MAAM;AAC3B;;AAEA;;;EAGE;;AAEF;EACE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,6BAA6B;AAC/B;;AAEA;;;EAGE;;AAEF;EACE,mBAAmB,EAAE,MAAM;EAC3B,0BAA0B,EAAE,MAAM;EAClC,iCAAiC,EAAE,MAAM;AAC3C;;AAEA;;EAEE;;AAEF;;EAEE,mBAAmB;AACrB;;AAEA;;;EAGE;;AAEF;;;EAGE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE,oBAAoB,EAAE,MAAM;EAC5B,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,MAAM;EACzB,SAAS,EAAE,MAAM;AACnB;;AAEA;;;EAGE;;AAEF;QACQ,MAAM;EACZ,iBAAiB;AACnB;;AAEA;;;EAGE;;AAEF;SACS,MAAM;EACb,oBAAoB;AACtB;;AAEA;;EAEE;;AAEF;;;;EAIE,0BAA0B;AAC5B;;AAEA;;EAEE;;AAEF;;;;EAIE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE;;AAEF;;;;EAIE,8BAA8B;AAChC;;AAEA;;EAEE;;AAEF;EACE,8BAA8B;AAChC;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB,EAAE,MAAM;EAC9B,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,eAAe,EAAE,MAAM;EACvB,UAAU,EAAE,MAAM;EAClB,mBAAmB,EAAE,MAAM;AAC7B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;EAGE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;AAC9B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;;EAGE;;AAEF;EACE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;AACvB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,aAAa;AACf;;AAEA;;EAEE;;AAEF;EACE,aAAa;AACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n'],sourceRoot:""}]);const s=a},426:(n,e,t)=>{t.d(e,{Z:()=>E});var r=t(537),o=t.n(r),i=t(645),a=t.n(i),s=t(667),d=t.n(s),c=new URL(t(669),t.b),l=new URL(t(265),t.b),A=new URL(t(147),t.b),u=new URL(t(872),t.b),m=a()(o()),f=d()(c),p=d()(l),h=d()(A),g=d()(u);m.push([n.id,"@font-face {\n  font-family: 'Barlow Bold';\n  src: url("+f+") format('woff2'),\n       url("+p+") format('woff');\n}\n\n@font-face {\n  font-family: 'Source Sans Pro';\n  src: url("+h+") format('woff2'),\n       url("+g+") format('woff');\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\n.project {\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  padding: 30px;\n}\n\n.project-title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding-bottom: 10px;\n  border-bottom: 1px solid rgb(207, 207, 207);\n}\n\n.todo {\n  display: flex;\n  align-items: flex-start;\n  border-bottom: 1px solid rgb(207, 207, 207);\n  justify-content: space-between;\n}\n\n.title {\n  overflow-wrap: break-word;\n  max-width: 90%;\n  padding-bottom: 30px;\n}\n\n.complete,\n.delete {\n  min-height: 20px;\n  min-width: 20px;\n  border-radius: 20px;\n  outline: 0;\n  border: 2px solid rgb(134, 129, 118);\n  cursor: pointer;\n  background-color: transparent;\n}\n\n.delete {\n  border: 0;\n}\n\n.completed {\n  background-color: rgb(172, 172, 172);\n}\n\n.strikethrough {\n  text-decoration: line-through;\n}\n\n.add-task button {\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 0;\n  text-align: left;\n}\n\n.add-task button:hover {\n  color: orange;\n}\n\n.project-list {\n  display: flex;\n  flex-direction: column;\n  padding-top: 30px;\n  background-color: rgb(248, 248, 248);\n  grid-row: 1 / 1;\n}\n\n.project-listing {\n  border: 0;\n  text-align: left;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 5px 20px;\n  background-color: rgb(248, 248, 248);\n  display: flex;\n  justify-content: space-between;\n}\n\n.project-listing:hover {\n  background-color: rgb(237, 230, 243);\n}\n\n.active-listing {\n  background-color: rgb(230, 230, 230);\n}\n\n.delete-listing {\n  border: 0;\n  background-color: transparent;\n  cursor: pointer;\n}\n\n.navbar {\n  font-family: 'Barlow Bold';\n  font-size: 2rem;\n  color: rgb(255, 255, 255);\n  background-color: rgb(145, 121, 190);\n  padding: 10px 20px;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  grid-template-rows: 1fr;\n  font-family: 'Source Sans Pro';\n  flex-grow: 1;\n}\n\n.main {\n  grid-column: 2 / 6;\n  grid-row: 1 / 1;\n}\n\n.left {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  column-gap: 10px;\n  max-width: 60%;\n}\n\n.right {\n  display: flex;\n  align-items: center;\n  column-gap: 10px;\n}\n\n.duedate {\n  border: 0;\n  background-color: transparent;\n  cursor: pointer;\n}\n\n.add-task form {\n  display: grid;\n  grid-template-columns: 4fr 1fr;\n}\n\n.add-task form textarea{\n  width: 100%;\n  min-height: 50px;\n  grid-column: 1 / 6;\n}\n\n.add-task form button {\n  grid-column: 5 / 6;\n  padding: 10px 0;\n  margin: 0;\n  border: 0;\n  background-color: transparent;\n  cursor: pointer;\n}\n\n.add-project button {\n  border: 0;\n  background-color: transparent;\n  padding: 5px 20px;\n  cursor: pointer;\n}\n\n.add-project button:hover {\n  color: orange;\n}\n\n.add-project form {\n  display: grid;\n  column-gap: 10px;\n  grid-template-columns: 1fr 70px;\n  padding: 5px 20px;\n}\n\n.add-project form input[type='text'] {\n  grid-column: 1 / 2;\n  width: 100%;\n  border: 0;\n  border-radius: 5px;\n  background-color: rgb(203, 203, 203);\n}\n\n.submit-project {\n  grid-column: 2 / 3;\n  padding: 0;\n}\n\n.cancel-project {\n  grid-column: 2 / 3;\n}\n\n.priority {\n  cursor: pointer;\n  border: 0;\n  background-color: transparent;\n  padding: 5px 10px;\n  color: grey;\n}\n\n.priority:hover {\n  background-color: rgb(238, 211, 211);\n  border-radius: 3px;\n}\n\n.top-priority,\n.priority:active {\n  color: red;\n  font-weight: bold;\n  background-color: rgb(238, 192, 192);\n  border-radius: 3px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,0BAA0B;EAC1B;6DAC2D;AAC7D;;AAEA;EACE,8BAA8B;EAC9B;6DACqE;AACvE;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,aAAa;EACb,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,oBAAoB;EACpB,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,2CAA2C;EAC3C,8BAA8B;AAChC;;AAEA;EACE,yBAAyB;EACzB,cAAc;EACd,oBAAoB;AACtB;;AAEA;;EAEE,gBAAgB;EAChB,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,oCAAoC;EACpC,eAAe;EACf,6BAA6B;AAC/B;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,6BAA6B;EAC7B,SAAS;EACT,eAAe;EACf,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,iBAAiB;EACjB,oCAAoC;EACpC,eAAe;AACjB;;AAEA;EACE,SAAS;EACT,gBAAgB;EAChB,eAAe;EACf,iBAAiB;EACjB,iBAAiB;EACjB,oCAAoC;EACpC,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,SAAS;EACT,6BAA6B;EAC7B,eAAe;AACjB;;AAEA;EACE,0BAA0B;EAC1B,eAAe;EACf,yBAAyB;EACzB,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,uBAAuB;EACvB,8BAA8B;EAC9B,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,SAAS;EACT,6BAA6B;EAC7B,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,SAAS;EACT,SAAS;EACT,6BAA6B;EAC7B,eAAe;AACjB;;AAEA;EACE,SAAS;EACT,6BAA6B;EAC7B,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,+BAA+B;EAC/B,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,kBAAkB;EAClB,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,SAAS;EACT,6BAA6B;EAC7B,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;AACpB;;AAEA;;EAEE,UAAU;EACV,iBAAiB;EACjB,oCAAoC;EACpC,kBAAkB;AACpB",sourcesContent:["@font-face {\n  font-family: 'Barlow Bold';\n  src: url('./fonts/barlow-bold-webfont.woff2') format('woff2'),\n       url('./fonts/barlow-bold-webfont.woff') format('woff');\n}\n\n@font-face {\n  font-family: 'Source Sans Pro';\n  src: url('./fonts/sourcesanspro-regular-webfont.woff2') format('woff2'),\n       url('./fonts/sourcesanspro-regular-webfont.woff') format('woff');\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n}\n\n.project {\n  display: flex;\n  flex-direction: column;\n  row-gap: 10px;\n  padding: 30px;\n}\n\n.project-title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding-bottom: 10px;\n  border-bottom: 1px solid rgb(207, 207, 207);\n}\n\n.todo {\n  display: flex;\n  align-items: flex-start;\n  border-bottom: 1px solid rgb(207, 207, 207);\n  justify-content: space-between;\n}\n\n.title {\n  overflow-wrap: break-word;\n  max-width: 90%;\n  padding-bottom: 30px;\n}\n\n.complete,\n.delete {\n  min-height: 20px;\n  min-width: 20px;\n  border-radius: 20px;\n  outline: 0;\n  border: 2px solid rgb(134, 129, 118);\n  cursor: pointer;\n  background-color: transparent;\n}\n\n.delete {\n  border: 0;\n}\n\n.completed {\n  background-color: rgb(172, 172, 172);\n}\n\n.strikethrough {\n  text-decoration: line-through;\n}\n\n.add-task button {\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 0;\n  text-align: left;\n}\n\n.add-task button:hover {\n  color: orange;\n}\n\n.project-list {\n  display: flex;\n  flex-direction: column;\n  padding-top: 30px;\n  background-color: rgb(248, 248, 248);\n  grid-row: 1 / 1;\n}\n\n.project-listing {\n  border: 0;\n  text-align: left;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 5px 20px;\n  background-color: rgb(248, 248, 248);\n  display: flex;\n  justify-content: space-between;\n}\n\n.project-listing:hover {\n  background-color: rgb(237, 230, 243);\n}\n\n.active-listing {\n  background-color: rgb(230, 230, 230);\n}\n\n.delete-listing {\n  border: 0;\n  background-color: transparent;\n  cursor: pointer;\n}\n\n.navbar {\n  font-family: 'Barlow Bold';\n  font-size: 2rem;\n  color: rgb(255, 255, 255);\n  background-color: rgb(145, 121, 190);\n  padding: 10px 20px;\n}\n\n.container {\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  grid-template-rows: 1fr;\n  font-family: 'Source Sans Pro';\n  flex-grow: 1;\n}\n\n.main {\n  grid-column: 2 / 6;\n  grid-row: 1 / 1;\n}\n\n.left {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  column-gap: 10px;\n  max-width: 60%;\n}\n\n.right {\n  display: flex;\n  align-items: center;\n  column-gap: 10px;\n}\n\n.duedate {\n  border: 0;\n  background-color: transparent;\n  cursor: pointer;\n}\n\n.add-task form {\n  display: grid;\n  grid-template-columns: 4fr 1fr;\n}\n\n.add-task form textarea{\n  width: 100%;\n  min-height: 50px;\n  grid-column: 1 / 6;\n}\n\n.add-task form button {\n  grid-column: 5 / 6;\n  padding: 10px 0;\n  margin: 0;\n  border: 0;\n  background-color: transparent;\n  cursor: pointer;\n}\n\n.add-project button {\n  border: 0;\n  background-color: transparent;\n  padding: 5px 20px;\n  cursor: pointer;\n}\n\n.add-project button:hover {\n  color: orange;\n}\n\n.add-project form {\n  display: grid;\n  column-gap: 10px;\n  grid-template-columns: 1fr 70px;\n  padding: 5px 20px;\n}\n\n.add-project form input[type='text'] {\n  grid-column: 1 / 2;\n  width: 100%;\n  border: 0;\n  border-radius: 5px;\n  background-color: rgb(203, 203, 203);\n}\n\n.submit-project {\n  grid-column: 2 / 3;\n  padding: 0;\n}\n\n.cancel-project {\n  grid-column: 2 / 3;\n}\n\n.priority {\n  cursor: pointer;\n  border: 0;\n  background-color: transparent;\n  padding: 5px 10px;\n  color: grey;\n}\n\n.priority:hover {\n  background-color: rgb(238, 211, 211);\n  border-radius: 3px;\n}\n\n.top-priority,\n.priority:active {\n  color: red;\n  font-weight: bold;\n  background-color: rgb(238, 192, 192);\n  border-radius: 3px;\n}"],sourceRoot:""}]);const E=m},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var d=n[s],c=r.base?d[0]+r.base:d[0],l=i[c]||0,A="".concat(c," ").concat(l);i[c]=l+1;var u=t(A),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var f=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var d=r(n,o),c=0;c<i.length;c++){var l=t(i[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=d}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{n.exports=t.p+"5b35d06cebf2b6c7b47f.woff"},669:(n,e,t)=>{n.exports=t.p+"564662c948b9c0ecd28f.woff2"},872:(n,e,t)=>{n.exports=t.p+"4b400e77c2200707ca2c.woff"},147:(n,e,t)=>{n.exports=t.p+"daa9b92cb1e9e2cc8032.woff2"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),a=t.n(i),s=t(565),d=t.n(s),c=t(216),l=t.n(c),A=t(589),u=t.n(A),m=t(735),f={};f.styleTagTransform=u(),f.setAttributes=d(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var p=t(426),h={};h.styleTagTransform=u(),h.setAttributes=d(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),e()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;class g{constructor(n,e=[]){this.title=n,this.todo_list=e}getTitle(){return this.title}setTitle(n){this.title=n}getTodoList(){return this.todo_list}addTodo(n){this.todo_list.push(n)}deleteTodo(n){this.todo_list=this.todo_list.filter((e=>e!==n))}contains(n){return this.todo_list.includes(n)}}class E{constructor(n,e="",t=null,r=!1){this.title=n,this.description=e,this.dueDate=t,this.priority=r,this.completed=!1}getTitle(){return this.title}setTitle(n){this.title=n}getDescription(){return this.description}setDescription(n){this.description=n}getDueDate(){return this.dueDate}setDueDate(n){this.dueDate=n}getPriority(){return this.priority}togglePriority(){this.priority=!this.priority}getCompleted(){return this.completed}toggleCompleted(){this.completed=!this.completed}}const b=t.p+"70acd1456d23957480af.png";function C(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function v(n){return C(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function y(n){C(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(n){if(C(1,arguments),!v(n)&&"number"!=typeof n)return!1;var e=y(n);return!isNaN(Number(e))}function B(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function x(n,e){C(2,arguments);var t=y(n).getTime(),r=B(e);return new Date(t+r)}function k(n,e){C(2,arguments);var t=B(e);return x(n,-t)}var M=864e5;function S(n){C(1,arguments);var e=1,t=y(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function T(n){C(1,arguments);var e=y(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=S(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var a=S(i);return e.getTime()>=o.getTime()?t+1:e.getTime()>=a.getTime()?t:t-1}function j(n){C(1,arguments);var e=T(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=S(t);return r}var D=6048e5,z={};function P(){return z}function L(n,e){var t,r,o,i,a,s,d,c;C(1,arguments);var l=P(),A=B(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:l.weekStartsOn)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=y(n),m=u.getUTCDay(),f=(m<A?7:0)+m-A;return u.setUTCDate(u.getUTCDate()-f),u.setUTCHours(0,0,0,0),u}function U(n,e){var t,r,o,i,a,s,d,c;C(1,arguments);var l=y(n),A=l.getUTCFullYear(),u=P(),m=B(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(A+1,0,m),f.setUTCHours(0,0,0,0);var p=L(f,e),h=new Date(0);h.setUTCFullYear(A,0,m),h.setUTCHours(0,0,0,0);var g=L(h,e);return l.getTime()>=p.getTime()?A+1:l.getTime()>=g.getTime()?A:A-1}function F(n,e){var t,r,o,i,a,s,d,c;C(1,arguments);var l=P(),A=B(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:l.firstWeekContainsDate)&&void 0!==r?r:null===(d=l.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),u=U(n,e),m=new Date(0);m.setUTCFullYear(u,0,A),m.setUTCHours(0,0,0,0);var f=L(m,e);return f}var W=6048e5;function I(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const O=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return I("yy"===e?r%100:r,e.length)},R=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):I(t+1,2)},N=function(n,e){return I(n.getUTCDate(),e.length)},Y=function(n,e){return I(n.getUTCHours()%12||12,e.length)},q=function(n,e){return I(n.getUTCHours(),e.length)},G=function(n,e){return I(n.getUTCMinutes(),e.length)},_=function(n,e){return I(n.getUTCSeconds(),e.length)},H=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return I(Math.floor(r*Math.pow(10,t-3)),e.length)};var Q={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return O(n,e)},Y:function(n,e,t,r){var o=U(n,r),i=o>0?o:1-o;return"YY"===e?I(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):I(i,e.length)},R:function(n,e){return I(T(n),e.length)},u:function(n,e){return I(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return I(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return I(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return R(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return I(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){C(1,arguments);var t=y(n),r=L(t,e).getTime()-F(t,e).getTime();return Math.round(r/W)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):I(o,e.length)},I:function(n,e,t){var r=function(n){C(1,arguments);var e=y(n),t=S(e).getTime()-j(e).getTime();return Math.round(t/D)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):I(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):N(n,e)},D:function(n,e,t){var r=function(n){C(1,arguments);var e=y(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/M)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):I(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return I(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return I(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return I(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return Y(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):q(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):I(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):I(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):G(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):_(n,e)},S:function(n,e){return H(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Z(o);case"XXXX":case"XX":return J(o);default:return J(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return Z(o);case"xxxx":case"xx":return J(o);default:return J(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+X(o,":");default:return"GMT"+J(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+X(o,":");default:return"GMT"+J(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return I(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return I((r._originalDate||n).getTime(),e.length)}};function X(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),i=r%60;if(0===i)return t+String(o);var a=e||"";return t+String(o)+a+I(i,2)}function Z(n,e){return n%60==0?(n>0?"-":"+")+I(Math.abs(n)/60,2):J(n,e)}function J(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+I(Math.floor(o/60),2)+t+I(o%60,2)}const V=Q;var $=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},K=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const nn={p:K,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return $(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",$(o,e)).replace("{{time}}",K(i,e))}};function en(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var tn=["D","DD"],rn=["YY","YYYY"];function on(n){return-1!==tn.indexOf(n)}function an(n){return-1!==rn.indexOf(n)}function sn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var dn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function cn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const ln={date:cn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:cn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:cn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var An={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function un(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,i=null!=t&&t.width?String(t.width):o;r=n.formattingValues[i]||n.formattingValues[o]}else{var a=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[s]||n.values[a]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const mn={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:un({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:un({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:un({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:un({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:un({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function fn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=e.match(o);if(!i)return null;var a,s=i[0],d=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(d)?hn(d,(function(n){return n.test(s)})):pn(d,(function(n){return n.test(s)}));a=n.valueCallback?n.valueCallback(c):c,a=t.valueCallback?t.valueCallback(a):a;var l=e.slice(s.length);return{value:a,rest:l}}}function pn(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function hn(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var gn,En={ordinalNumber:(gn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(gn.matchPattern);if(!t)return null;var r=t[0],o=n.match(gn.parsePattern);if(!o)return null;var i=gn.valueCallback?gn.valueCallback(o[0]):o[0];i=e.valueCallback?e.valueCallback(i):i;var a=n.slice(r.length);return{value:i,rest:a}}),era:fn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:fn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:fn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:fn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:fn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const bn={code:"en-US",formatDistance:function(n,e,t){var r,o=dn[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:ln,formatRelative:function(n,e,t,r){return An[n]},localize:mn,match:En,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Cn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,vn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,yn=/^'([^]*?)'?$/,wn=/''/g,Bn=/[a-zA-Z]/;function xn(n){var e=n.match(yn);return e?e[1].replace(wn,"'"):n}function kn(n){const e=document.createElement("div");e.classList.add("project");const t=document.createElement("div");return t.classList.add("project-title"),t.textContent=n.getTitle(),e.appendChild(t),n.getTodoList().forEach((t=>{e.appendChild(Mn(t,n))})),e.appendChild(function(n,e){const t=document.createElement("div");t.classList.add("add-task");const r=document.createElement("form");r.style.display="none";const o=document.createElement("textarea"),i=document.createElement("button");i.setAttribute("type","button"),i.textContent="Add task";const a=document.createElement("button");a.setAttribute("type","button"),a.textContent="Cancel",i.addEventListener("click",(t=>{t.preventDefault();const i=new E(o.value);n.addTodo(i),e.lastElementChild.before(Mn(i,n)),o.value="",r.style.display="none",s.style.display="block"})),a.addEventListener("click",(n=>{n.preventDefault(),o.value="",r.style.display="none",s.style.display="block"})),r.appendChild(o),r.appendChild(i),r.appendChild(a);const s=document.createElement("button");return s.textContent="Add task",s.addEventListener("click",(()=>{r.style.display="grid",s.style.display="none"})),t.appendChild(s),t.appendChild(r),t}(n,e)),e}function Mn(n,e){const t=document.createElement("div");t.classList.add("todo");const r=document.createElement("div");r.classList.add("left");const o=document.createElement("div");o.classList.add("right");const i=document.createElement("div");i.classList.add("title"),i.textContent=n.getTitle();const a=document.createElement("button");a.setAttribute("type","button"),a.classList.add("complete"),n.getCompleted()&&(a.classList.add("completed"),i.classList.add("strikethrough")),a.addEventListener("click",(()=>{n.toggleCompleted(),n.getCompleted()?(a.classList.add("completed"),i.classList.add("strikethrough")):(a.classList.remove("completed"),i.classList.remove("strikethrough"))})),r.appendChild(a),r.appendChild(i);const s=document.createElement("button");s.classList.add("priority"),s.textContent="!",s.addEventListener("click",(()=>{n.togglePriority(),n.getPriority()?s.classList.add("top-priority"):s.classList.remove("top-priority")}));const d=document.createElement("div");d.classList.add("duedate");const c=document.createElement("div");c.textContent=n.getDueDate()?n.getDueDate():"No due date";const l=document.createElement("input");l.setAttribute("type","date"),l.style.display="none",d.appendChild(c),d.appendChild(l),d.addEventListener("click",(()=>{"none"===l.style.display&&(l.style.display="block",c.style.display="none")})),l.addEventListener("change",(e=>{n.setDueDate(l.valueAsDate),l.style.display="none",c.style.display="block",c.textContent=n.getDueDate()?function(n,e,t){var r,o,i,a,s,d,c,l,A,u,m,f,p,h,g,E,b,v;C(2,arguments);var x=String(e),M=P(),S=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:M.locale)&&void 0!==r?r:bn,T=B(null!==(i=null!==(a=null!==(s=null!==(d=null==t?void 0:t.firstWeekContainsDate)&&void 0!==d?d:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:M.firstWeekContainsDate)&&void 0!==a?a:null===(A=M.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==i?i:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=B(null!==(m=null!==(f=null!==(p=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(g=t.locale)||void 0===g||null===(E=g.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==p?p:M.weekStartsOn)&&void 0!==f?f:null===(b=M.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==m?m:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var D=y(n);if(!w(D))throw new RangeError("Invalid time value");var z=en(D),L=k(D,z),U={firstWeekContainsDate:T,weekStartsOn:j,locale:S,_originalDate:D};return x.match(vn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,nn[e])(n,S.formatLong):n})).join("").match(Cn).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return xn(r);var i=V[o];if(i)return null!=t&&t.useAdditionalWeekYearTokens||!an(r)||sn(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!on(r)||sn(r,e,String(n)),i(L,r,S.localize,U);if(o.match(Bn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}(n.getDueDate(),"dd/MM/yyyy"):"No due date"}));const A=document.createElement("button");A.setAttribute("type","button"),A.classList.add("delete"),A.addEventListener("click",(()=>{e.deleteTodo(n),t.remove()}));const u=new Image;return u.src=b,A.appendChild(u),o.appendChild(s),o.appendChild(d),o.appendChild(A),t.appendChild(r),t.appendChild(o),t}function Sn(n){const e=document.createElement("button");e.classList.add("project-listing");const t=document.createElement("div");t.textContent=n.getTitle();const r=document.createElement("button");r.setAttribute("type","button"),r.classList.add("delete-listing");const o=new Image;return o.src=b,r.appendChild(o),e.appendChild(t),e.appendChild(r),e}class Tn{constructor(n=[]){this.project_list=n,this.project_titles=new Set,this.project_list.forEach((n=>{this.project_titles.add(n.getTitle())}))}getProjects(){return this.project_list}getProject(n){return this.project_list.find((e=>e.getTitle()===n))}addProject(n){return!this.project_titles.has(n.getTitle())&&(this.project_list.push(n),!0)}deleteProject(n){this.project_list=this.project_list.filter((e=>e.getTitle()!==n))}contains(n){return this.project_list.includes(n)}}function jn(n){localStorage.setItem("projectList",JSON.stringify(n))}const Dn=function(){if(!localStorage.getItem("projectList"))return new Tn;const n=JSON.parse(localStorage.getItem("projectList")),e=new Tn;for(let t of n.project_list){const n=new g(t.title);for(let e of t.todo_list)n.addTodo(new E(e.title,e.description,e.dueDate,e.priority,e.completed));e.addProject(n)}return e}(),zn=function(){const n=document.createElement("div");n.classList.add("navbar");const e=document.createElement("span");return e.classList.add("logo"),e.textContent="Todo List",n.appendChild(e),n}(),Pn=document.createElement("div");Pn.classList.add("container");const Ln=document.createElement("div");Ln.classList.add("main");const Un=function(n){const e=document.createElement("div");return e.classList.add("project-list"),n.getProjects().forEach((n=>{e.appendChild(Sn(n))})),e}(Dn);Un.childNodes.forEach((n=>{n.addEventListener("click",(()=>{Ln.textContent="",Ln.appendChild(kn(Dn.getProject(n.textContent))),Un.childNodes.forEach((n=>n.classList.remove("active-listing"))),n.classList.add("active-listing")})),n.querySelector(".delete-listing").addEventListener("click",(e=>{e.stopImmediatePropagation(),Dn.deleteProject(n.textContent),n.remove(),jn(Dn),Un.querySelector(".active-listing")||1===Un.childElementCount?1===Un.childElementCount&&(Ln.textContent=""):(Ln.textContent="",Un.childNodes[0].querySelector("div").click())}))})),0!=Un.childElementCount&&Un.childNodes[0].querySelector("div").click();const Fn=function(){const n=document.createElement("div");n.classList.add("add-project");const e=document.createElement("button");e.textContent="Add project";const t=document.createElement("form");t.style.display="none";const r=document.createElement("input");r.setAttribute("type","text");const o=document.createElement("button");o.setAttribute("type","button"),o.classList.add("submit-project"),o.textContent="Submit";const i=document.createElement("button");return i.setAttribute("type","button"),i.classList.add("cancel-project"),i.textContent="Cancel",t.appendChild(r),t.appendChild(o),t.appendChild(i),n.appendChild(e),n.appendChild(t),n}();Un.appendChild(Fn);const Wn=Fn.querySelector("button"),In=Fn.querySelector("form");Wn.addEventListener("click",(()=>{In.style.display="grid",Wn.style.display="none"}));const On=In.querySelector(".submit-project"),Rn=In.querySelector(".cancel-project"),Nn=Fn.querySelector('input[type="text"]');On.addEventListener("click",(n=>{if(n.preventDefault(),""===Nn.value)return void alert("Project titles must be not be empty.");const e=new g(Nn.value);if(!Dn.addProject(e))return void alert("Project titles must be unique.");jn(Dn);const t=Sn(e);Un.lastElementChild.before(t),Nn.value="",In.style.display="none",Wn.style.display="block",t.addEventListener("click",(()=>{Ln.textContent="",Ln.appendChild(kn(Dn.getProject(t.textContent))),Un.childNodes.forEach((n=>n.classList.remove("active-listing"))),t.classList.add("active-listing")}))})),Rn.addEventListener("click",(n=>{n.preventDefault(),Nn.value="",Wn.style.display="block",In.style.display="none"})),document.body.appendChild(zn),document.body.appendChild(Pn),Pn.appendChild(Un),Pn.appendChild(Ln)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,